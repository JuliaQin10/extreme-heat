# -*- coding: utf-8 -*-
"""Experiment_20200305 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZmaGtkfKrOXNa-nKGKs8Egbtz5bXmwJ2
"""

import os
import skimage
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from PIL import Image
from util import milad

def readCSV(P, resoltion = 1):
    data = pd.read_csv(P,
                        skiprows=100,
                        skip_blank_lines=False,
                        names=range(64))
    raw = np.array(data[:(resoltion**2)*12288]).reshape(resoltion*768,resoltion*1024)
    offset = np.array(data[(resoltion**2)*12288+1:]).reshape(768,1024)
    if resoltion>1:
        offset = np.array(Image.fromarray(offset).resize((resoltion*1024,resoltion*768)))
    return raw, offset

def correctBP(img, size=3):
    bp = milad.badPixels(img, size)
    bpRemoved = milad.removeBadpixels(img, bp, size)
    return bpRemoved

root = "./IRData_20200305"
csvs = [csv for csv in os.listdir(root) if ".csv" in csv]
sorted(csvs)
files = [csv[:-4] for csv in csvs]

refs = [csv for csv in os.listdir(os.path.join(root, "ref")) if ".csv" in csv]
sorted(refs)

resoltions = [1 for i in range(10)]
resoltions += [2, 3, 4]

for csv, resoltion in zip(csvs, resoltions):
    print(f"Processing {csv} ...")
    raw, offset = readCSV(os.path.join(root, csv), resoltion)
    img = raw - offset
    
    size = resoltion*2+1
    
    bpRemoved = img
    for i in range(resoltion):
        bpRemoved = correctBP(bpRemoved, size)
    
    np.save(os.path.join(root, "bpRemoved_"+csv[:-4]+".npy"), bpRemoved)
    
    fig=plt.imshow(bpRemoved, cmap="gray")
    fig.write_png(os.path.join(root, f"{resoltion}by{resoltion}_bpRemoved_"+csv[:-4]+".jpg"))

resoltions = [1, 2, 3, 4]

for csv, resoltion in zip(refs, resoltions):
    print(f"Processing {csv} ...")
    raw, offset = readCSV(os.path.join(root, "ref", csv), resoltion)
    img = raw - offset
    
    size = resoltion*2+1
    
    bpRemoved = img
    for i in range(resoltion):
        bpRemoved = correctBP(bpRemoved, size)
    
    np.save(os.path.join(root, "ref", "bpRemoved", "bpRemoved_"+csv[:-4]+".npy"), bpRemoved)
    
    fig=plt.imshow(bpRemoved, cmap="gray")
    fig.write_png(os.path.join(root, "ref", "bpRemoved", f"{resoltion}by{resoltion}_bpRemoved_"+csv[:-4]+".jpg"))

"""# Refs"""

ref1 = np.load(os.path.join(root, "ref", "bpRemoved", "bpRemoved_oneHZ_2020-03-05_14-32-30.0514.npy"))
ref2 = np.load(os.path.join(root, "ref", "bpRemoved", "bpRemoved_oneHZ_2020-03-05_14-33-15.0184.npy"))
ref3 = np.load(os.path.join(root, "ref", "bpRemoved", "bpRemoved_oneHZ_2020-03-05_14-33-38.0895.npy"))
ref4 = np.load(os.path.join(root, "ref", "bpRemoved", "bpRemoved_oneHZ_2020-03-05_14-34-14.0934.npy"))

fig = plt.imshow(ref1, cmap="gray")

fig = plt.imshow(ref2, cmap="gray")

fig = plt.imshow(ref3, cmap="gray")

fig = plt.imshow(ref4, cmap="gray")

"""# Imgs"""

imgs = [img for img in os.listdir(os.path.join(root, "bpRemoved")) if ".npy" in img]
sorted(imgs)

refs = [ref1 for i in range(10)]
refs += [ref2, ref3, ref4]

for img, ref in zip(imgs, refs):
    im = np.load(os.path.join(root, "bpRemoved", img))
    im, _ = milad.removeVign(im, ref)
    
    fig = plt.imshow(im, cmap="gray")
    fig.write_png(os.path.join(root, "preprocessed", f"preprocessed_"+img[10:-4]+".jpg"))
    np.save(os.path.join(root, "preprocessed", f"preprocessed_"+img[10:-4]+".npy"), im)

img1 = np.load(os.path.join(root, "preprocessed", "preprocessed_oneHZ_2020-03-05_14-21-22.0779.npy"))
img2 = np.load(os.path.join(root, "preprocessed", "preprocessed_oneHZ_2020-03-05_14-21-49.0948.npy"))
img3 = np.load(os.path.join(root, "preprocessed", "preprocessed_oneHZ_2020-03-05_14-22-13.0842.npy"))
img4 = np.load(os.path.join(root, "preprocessed", "preprocessed_oneHZ_2020-03-05_14-25-02.0739.npy"))


plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
plt.title("Image 4 by 4")

"""# Sample Images with Fixed Ratio

Sample lines from the given image. Lines are located in h = 200, 400, 600 in the original 1 by 1 image
"""

def sampleR(img, width=50, ratio=1):
    """
    Sample lines from the given image with fixed ratio.
    """
    
    samples = [img[(i*100-width)*ratio: (i*100+width)*ratio, :] for i in range(2, 7, 2)]
    
    return np.array(samples)

def plotHR(imgs, figsize=(8,8)):
    """
    Plot 5 different high resolution images.
    
    Params:
        imgs: a list of high resolution images.
    """
    
    plt.figure(figsize=figsize)
    
    vmax = np.max(imgs[0])
    vmin = np.min(imgs[0])

    plt.subplot(4,1,1)
    plt.imshow(imgs[0], "gray", vmax=vmax, vmin=vmin)
    plt.title("Image 1 by 1")

    plt.subplot(4,1,2)
    plt.imshow(imgs[1], "gray", vmax=vmax, vmin=vmin)
    plt.title("Image 2 by 2")

    plt.subplot(4,1,3)
    plt.imshow(imgs[2], "gray", vmax=vmax, vmin=vmin)
    plt.title("Image 3 by 3")

    plt.subplot(4,1,4)
    plt.imshow(imgs[3], "gray", vmax=vmax, vmin=vmin)
    plt.title("Image 4 by 4")

def plotL(imgs, loc="lower left"):
    """
    Plot lines for high resolution images.
    
    Params:
        imgs: a list of high resolutions.
    """
    
    plt.figure(figsize=(10,6))
    
    ratios = [1, 2, 3, 4]
    lines = [img.mean(0) for img in imgs]

    for i in range(4):
        ratio = ratios[i]
        line = lines[i]
        plt.plot(np.linspace(0, 1, len(line)), line, label=f"Line of {ratio} by {ratio} Image")

    plt.legend(loc=loc)

"""## Line 1"""

plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 150*1), 1024*1, 100*1,
                      alpha=0.5, facecolor='#1f77b4'))
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 150*2), 1024*2, 100*2,
                      alpha=0.5, facecolor='#1f77b4'))
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 150*3), 1024*3, 100*3,
                      alpha=0.5, facecolor='#1f77b4'))
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 150*4), 1024*4, 100*4,
                      alpha=0.5, facecolor='#1f77b4'))
plt.title("Image 4 by 4")

ratios = [1, 2, 3, 4]
imgs = [img1, img2, img3, img4]
samples = [sampleR(img, ratio=ratio) for img, ratio in zip(imgs, ratios)]

line1 = [sample[0] for sample in samples]
line2 = [sample[1] for sample in samples]
line3 = [sample[2] for sample in samples]

plotHR(line1)

plotL(line1, loc="upper right")

"""## Line 2"""

plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 350*1), 1024*1, 100*1,
                      alpha=0.5, facecolor='#ff7f0e'))
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 350*2), 1024*2, 100*2,
                      alpha=0.5, facecolor='#ff7f0e'))
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 350*3), 1024*3, 100*3,
                      alpha=0.5, facecolor='#ff7f0e'))
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 350*4), 1024*4, 100*4,
                      alpha=0.5, facecolor='#ff7f0e'))
plt.title("Image 4 by 4")

plotHR(line2)

plotL(line2, loc="upper right")

"""## Line 3"""

plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 550*1), 1024*1, 100*1,
                      alpha=0.5, facecolor='#2ca02c'))
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 550*2), 1024*2, 100*2,
                      alpha=0.5, facecolor='#2ca02c'))
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 550*3), 1024*3, 100*3,
                      alpha=0.5, facecolor='#2ca02c'))
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 550*4), 1024*4, 100*4,
                      alpha=0.5, facecolor='#2ca02c'))
plt.title("Image 4 by 4")

plotHR(line3)

plotL(line3, loc="upper right")

"""## Line cross the building"""

def sampleBuilding(img, width=50, ratio=1.0):
    
    samples = img[(550-width)*ratio: (550+width)*ratio, :]
    
    return samples


samples = [sampleBuilding(img, ratio=ratio) for img, ratio in zip(imgs, ratios)]

plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 500*1), 1024*1, 100*1,
                      alpha=0.5))
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 500*2), 1024*2, 100*2,
                      alpha=0.5))
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 500*3), 1024*3, 100*3,
                      alpha=0.5))
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 500*4), 1024*4, 100*4,
                      alpha=0.5))
plt.title("Image 4 by 4")

plotHR(samples)

plotL(samples, loc="upper right")

"""# Sample Images with Fixed Width"""

def sampleW(img, width=50, ratio=1):
    """
    Sample lines from the given image with fixed width.
    """
    
    samples = [img[(i*100*ratio-width): (i*100*ratio+width), :] for i in range(2, 7, 2)]
    
    return np.array(samples)

samples = [sampleW(img, ratio=ratio) for img, ratio in zip(imgs, ratios)]

line1 = [sample[0] for sample in samples]
line2 = [sample[1] for sample in samples]
line3 = [sample[2] for sample in samples]

"""## Line 1"""

plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 200*1-50), 1024*1, 100,
                      alpha=0.5, facecolor='#1f77b4'))
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 200*2-50), 1024*2, 100,
                      alpha=0.5, facecolor='#1f77b4'))
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 200*3-50), 1024*3, 100,
                      alpha=0.5, facecolor='#1f77b4'))
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 200*4-50), 1024*4, 100,
                      alpha=0.5, facecolor='#1f77b4'))
plt.title("Image 4 by 4")

plotHR(line1, figsize=(14,8))

plotL(line1, loc="upper right")

"""## Line 2"""

plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 400*1-50), 1024*1, 100*1,
                      alpha=0.5, facecolor='#ff7f0e'))
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 400*2-50), 1024*2, 100*1,
                      alpha=0.5, facecolor='#ff7f0e'))
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 400*3-50), 1024*3, 100*1,
                      alpha=0.5, facecolor='#ff7f0e'))
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 400*4-50), 1024*4, 100*1,
                      alpha=0.5, facecolor='#ff7f0e'))
plt.title("Image 4 by 4")

plotHR(line2, figsize=(14,8))

plotL(line2, loc="upper right")

"""## Line 3"""

plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 600*1-50), 1024*1, 100*1,
                      alpha=0.5, facecolor='#2ca02c'))
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 600*2-50), 1024*2, 100*1,
                      alpha=0.5, facecolor='#2ca02c'))
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 600*3-50), 1024*3, 100*1,
                      alpha=0.5, facecolor='#2ca02c'))
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 600*4-50), 1024*4, 100*1,
                      alpha=0.5, facecolor='#2ca02c'))
plt.title("Image 4 by 4")

plotHR(line3, figsize=(14,8))

plotL(line3, loc="upper right")

"""## Line cross buildings"""

def sampleBuilding(img, width=50, ratio=1.0):
    
    samples = img[(550*ratio-width): (550*ratio+width), :]
    
    return samples


samples = [sampleBuilding(img, ratio=ratio) for img, ratio in zip(imgs, ratios)]

plt.figure(figsize=(16, 12))

plt.subplot(2,2,1)
plt.imshow(img1, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 550*1-50), 1024*1, 100*1,
                      alpha=0.5))
plt.title("Image 1 by 1")

plt.subplot(2,2,2)
plt.imshow(img2, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 550*2-50), 1024*2, 100*1,
                      alpha=0.5))
plt.title("Image 2 by 2")

plt.subplot(2,2,3)
plt.imshow(img3, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 550*3-50), 1024*3, 100*1,
                      alpha=0.5))
plt.title("Image 3 by 3")

plt.subplot(2,2,4)
plt.imshow(img4, cmap="gray")
currentAxis = plt.gca()
currentAxis.add_patch(Rectangle((0, 550*4-50), 1024*4, 100*1,
                      alpha=0.5))
plt.title("Image 4 by 4")

plotHR(samples, figsize=(14,8))

plotL(line3, loc="upper right")

